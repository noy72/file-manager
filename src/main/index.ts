import { app, BrowserWindow, ipcMain, Menu, MenuItem } from "electron";
import "source-map-support/register";
import { CHANNELS } from "../constant";
import {
    getItemsForRenderer,
    getItemForRendererWithGroupdedTags,
    syncItemsFromLocations,
    getLocalItems,
    addItemTag,
} from "./domain/item";
import { open, openAsOther } from "./domain/exec";
import { getTags, updateOpenedAtById } from "./infrastructure/lowdb";
import { isDir } from "./infrastructure/fileSystem";
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;

declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string; //preloadスクリプトのファイルパス

const createWindow = (): void => {
    // Create the browser window.
    const mainWindow = new BrowserWindow({
        height: 600,
        width: 800,
        webPreferences: {
            preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
        },
    });

    // and load the index.html of the app.
    mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

    // Open the DevTools.
    mainWindow.webContents.openDevTools();
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", () => {
    createWindow();
    syncItemsFromLocations();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
    if (process.platform !== "darwin") {
        app.quit();
    }
});

app.on("activate", () => {
    // On OS X it's common to re-create a window in the app when the
    // dock icon is clicked and there are no other windows open.
    if (BrowserWindow.getAllWindows().length === 0) {
        createWindow();
    }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

ipcMain.handle(CHANNELS.GET_ITEMS, (_event, query: string) =>
    getItemsForRenderer(query)
);
ipcMain.handle(CHANNELS.GET_ITEM, (_event, id: string) =>
    getItemForRendererWithGroupdedTags(id)
);
ipcMain.handle(CHANNELS.GET_LOCAL_ITEMS, (_event, id: string) =>
    getLocalItems(id)
);
ipcMain.handle(CHANNELS.GET_TAGS, _event => getTags());
ipcMain.handle(
    CHANNELS.ADD_TEIM_TAG,
    (_event, id: string, group: string, tag: string) =>
        addItemTag(id, group, tag)
);
ipcMain.handle(CHANNELS.OPEN, (_event, location: string) => open(location));
ipcMain.handle(CHANNELS.UPDATE_OPENED_AT, (_event, id: string) => updateOpenedAtById(id));

ipcMain.handle(CHANNELS.POPUP_ITEM_CARD_MENU, (_event, location: string) => {
    const menu = new Menu();
    menu.append(new MenuItem({
        label: 'Open',
        click: () => open(location)
    }));
    if (isDir(location)) {
        menu.append(new MenuItem({
            label: 'Open as other',
            click: () => openAsOther(location)
        }));
    }
    menu.popup({ window: BrowserWindow.getFocusedWindow() });
});
